module.exports = {
    extend : "apostrophe-widgets",
    label : "Table Widget",
    scene : "user",
    beforeConstruct : function(self,options){
        // Lean or Non-Lean Assets to decide which fields to use 
        var originalFields = [];
        if (options.apos.assets.options.lean && options.player){
            originalFields = [
                {
                    name: "ajaxOptions",
                    label: "Ajax Options",
                    type: "string",
                    textarea: true,
                    htmlHelp: `Example :
            <br><br><pre><code style="font-family: monospace;background-color: #EEE;padding: 10px;font: 300 12px monospace;display: block;">{
  ajax: "data/arrays.txt"
}</code></pre>You can refer here for more info : <a href="https://datatables.net/examples/ajax/" target="_blank">DataTables JS Ajax Data Source</a><br>`
                }
            ]
        }else{
            originalFields = [
                {
                    name: "ajaxOptions",
                    label: "Ajax Options",
                    type: "string",
                    textarea: true,
                    htmlHelp: `Example :
            <br><br><pre><code style="font-family: monospace;background-color: #EEE;padding: 10px;font: 300 12px monospace;display: block;">    ajax: {
        url: "some/url/data.txt", // url to remote data
        content: {
            type: "csv", // specify the content
        },
        load: function(xhr) {
            // process and return the response data
        }
    }</code></pre>You can refer here for more info : <a href="https://datatables.net/examples/ajax/" target="_blank">DataTables JS Ajax Data Source</a><br>`
                }
            ]
        }
        options.addFields =  [
            {
                name: 'row',
                label: 'Number of Row(s)',
                type: 'integer'
            },
            {
                name : 'column',
                label : 'Number of Column(s)',
                type : 'integer'
            },
            {
                name: "data",
                label: "Custom Data",
                type: "string",
                textarea : true,
                help : "This field is auto generated by your row & column input."
            }
        ].concat(options.addFields || []);

        // Combine fields
        options.addFields = options.addFields.concat(originalFields);

        options.arrangeFields = [
            {
                name : "table",
                label : "Custom Table",
                fields : ["row" , "column" , "data"]
            },
            {
                name: "ajax",
                label: "Ajax Table",
                fields: ["ajaxOptions"]
            },
            {
                name : "settings",
                label : "Settings",
                fields : [],
                last : true
            }
        ].concat(options.arrangeFields || []);
    },
    afterConstruct : function(self){
        // Allow devs to extend it
        self.pushAssets();
    },
    construct : function(self,options){
        var superPushAssets = self.pushAssets;

        // Override but pass extra data (data.something)
        self.output = function (widget, options) {
            return self.partial(self.template, {
                widget: widget,
                options: options,
                manager: self,
                // Pass to widget.html
                table: self.myData
            });
        };

        self.route("post", "submit", function(req,res){
            if(!req.body.table){
                return res.send({
                    status : "error",
                    message : "Data Not Received"
                })
            }

            // Get data
            self.myData = req.body.table

            return res.send({
                status : "success",
                message : "Data Received"
            })
        })

        self.pushAssets = function(){
            self.pushAsset('script', 'editor', {
                when : "user"
            });

            self.pushAsset('script', 'vendor/datatablesJQuery/datatables.min', {
                when: "always"
            });

            self.pushAsset('stylesheet', 'vendor/datatablesJQuery/datatables.min', {
                when: "always"
            })

            if(self.apos.assets.options.lean){
                if(options.player){
                    self.pushAsset('script', 'vendor/datatablesVanillaJS/datatables.min', {
                        when: "lean"
                    });

                    self.pushAsset('script', 'lean', {
                        when: "lean"
                    });

                    self.pushAsset('stylesheet', 'vendor/datatablesVanillaJS/datatables.min', {
                        when: "lean"
                    })
                }
            }

            superPushAssets();
        }

        // Extend Options to get on browser apostrophe-widgets JS
        var superGetCreateSingletonOptions = self.getCreateSingletonOptions;
        self.getCreateSingletonOptions = function (req) {
            var options = superGetCreateSingletonOptions(req);
            options.table = self.myData;
            return options;
        };
    }
}