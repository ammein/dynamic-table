var async = require('async');
module.exports = {
    extend : "apostrophe-pieces",
    name : "dynamic-table",
    label : "Dynamic Table",
    alias : "dynamicTable",
    seo: false,
    openGraph: false,
    searchable : false,
    moogBundle : {
        modules: ['dynamic-table-schemas', 'dynamic-table-widgets'],
        directory: 'lib/modules'
    },
    beforeConstruct : function(self,options){
        // Lean or Non-Lean Assets to decide which fields to use 
        var originalFields = [];
        if (options.apos.assets.options.lean) {
            originalFields = [
                {
                    name: "ajaxOptions",
                    label: "Ajax Options",
                    type: "string",
                    textarea: true,
                    htmlHelp: `Example :
            <br><br><pre><code style="font-family: monospace;background-color: #EEE;padding: 10px;font: 300 12px monospace;display: block;">ajax: {
    url: "some/url/data.txt", // url to remote data
    content: {
        type: "csv", // specify the content
    },
    load: function(xhr) {
        // process and return the response data
    }
}</code></pre>You can refer here for more info : <a href="https://github.com/fiduswriter/Simple-DataTables/wiki/ajax" target="_blank">DataTables Vanilla JS Ajax Data Source</a><br>`
                }
            ];
        } else {
            originalFields = [
                {
                    name: "ajaxOptions",
                    label: "Ajax Options",
                    type: "string",
                    textarea: true,
                    htmlHelp: `Example :
            <br><br><pre><code style="font-family: monospace;background-color: #EEE;padding: 10px;font: 300 12px monospace;display: block;">{
  ajax: "data/arrays.txt"
}</code></pre>You can refer here for more info : <a href="https://datatables.net/examples/ajax/" target="_blank">DataTables JQuery Ajax Data Source</a><br>`
                }
            ]
        }
        options.addFields = [
            {
                name : "title",
                type : "string",
                label : "Title",
                required : true
            },
            {
                name: 'row',
                label: 'Number of Row(s)',
                type: 'integer'
            },
            {
                name: 'column',
                label: 'Number of Column(s)',
                type: 'integer'
            },
            {
                name: "data",
                label: "Custom Data",
                type: "string",
                textarea: true,
                help: "This field is auto generated by your row & column input."
            },
            {
                name : "id",
                label : "id",
                type : "string",
                help : "ID for the table",
                required : true,
                readOnly : true
            }
        ].concat(options.addFields || []);

        // Combine fields
        options.addFields = options.addFields.concat(originalFields);

        options.arrangeFields = [
            {
                name: "table",
                label: "Custom Table",
                fields: ["row", "column", "data"]
            },
            {
                name: "ajax",
                label: "Ajax Table",
                fields: ["ajaxOptions"]
            },
            {
                name : "getExistingTable",
                label : "Use Existing Table",
                fields : ["_dynamicTable"]
            },
            {
                name: "settings",
                label: "Settings",
                fields: ["title", "id", "slug", "published", "tags", "trash"],
                last: true
            }
        ].concat(options.arrangeFields || []);
    },
    afterConstruct : function(self){
        self.dynamicTableSchemas();
        self.allBrowserCalls();
    },
    construct : function(self,options){
        var superPushAssets = self.pushAssets;

        self.pushAssets = function(){
            superPushAssets();

            self.pushAsset('script' , "myEditor", {
                when : "user"
            })

            self.pushAsset('script', 'utils', {
                when: "user"
            });
        }

        self.allBrowserCalls = function () {
            var options = {}
            _.defaults(options, {
                name: "dynamic-table-utils",
                browser: {}
            })

            _.extend(options.browser, {
                action: "/modules/dynamic-table",
                schemas: self.table.tableSchemas,
                group: self.table.tableSchemasGroup
            })

            // To push apos.modules["dynamic-table-utils"] && also other options to pass on
            self.apos.push.browserCall("user", "apos.createModule(? , ? , ?)", "dynamic-table-utils", {
                editorDataTableOptions: {
                    "scrollY": 200,
                    "scrollX": true,
                    "retrieve": true
                }
            }, "dynamicTableUtils")

            // Push extra options
            self.apos.push.browserCall("user", "apos.create(? , ?)", "dynamic-table-utils", options.browser)
        }

        self.dynamicTableSchemas = function(){
            self.tableSchemas = self.apos.schemas.subset(self.schema, 
                ["row", "column" , "data", "ajaxOptions" , "id"])
            self.tableSchemasGroup = self.apos.schemas.toGroups(self.schema);
        };

        self.apos.permissions.add({
            value: 'edit-dynamic-table',
            label: 'Edit Dynamic Table'
        });

        // Get the fields 
        self.route("get", "fields" , function(req ,res){
            return self.getTable(req, function(err,result){
                if(err){
                    return res.send({
                        status : "error",
                        message : "Table not found."
                    })
                }

                return res.send({
                    status : "success",
                    result : result
                })
            })
        })

        // Add Submit Route for pieces insert
        self.route('post', "submit", function(req,res){
            return self.submitTables(req, function(err){
                if(err){
                    return res.send({
                        status : "error",
                        message : err
                    })
                }

                return res.send({
                    status : "success",
                    message : "Success !"
                })
            })
        })

        self.route("post", "update", function(req,res){
            return self.updateTables(req, function (err) {
                if (err) {
                    return res.send({
                        status: "error",
                        message: err
                    })
                }

                return res.send({
                    status: "success",
                    message: "Success !"
                })
            })
        })

        self.beforeInsert = function (req, piece, options, callback) {
            
        }

        self.getTable = function(req, callback){
            return self.apos.docs.find(req, { _id : req.body.id }).toObject(function(err , object){
                if(err){
                    return callback(err);
                }

                return callback(null, object);
            })
        }

        self.updateTables = function(req, callback){
            var piece = {};
            return async.series([
                find,
                convert,
                update
            ],callback);

            function find(callback){
                return self.apos.docs.find(req, { _id : req.body.id }).toObject(function(err , object){
                    if(err){
                        return callback(err);
                    }
                    Object.assign(piece, object);
                    return callback(null , object);
                });
            }

            function convert(callback) {
                // This one just like Object.assign
                return self.apos.schemas.convert(req, self.schema, null, req.body, piece , callback);
            }

            function update(callback){
                return self.update(req, piece, {permissions : false } , callback);
            }
        }

        self.submitTables = function(req , callback){
            var piece = {};
            return async.series([
                convert,
                insert
            ],callback);

            function convert(callback){
                // This one just like Object.assign
                return self.apos.schemas.convert(req, self.schema, null , req.body, piece, callback);
            }

            function insert(callback){
                return self.insert(req, piece , { permissions : false } , callback);
            }
        }
    }
}